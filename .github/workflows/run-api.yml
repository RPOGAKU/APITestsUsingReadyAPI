name: Run ReadyAPI Tests

on:
  workflow_dispatch:

permissions:
  checks: write
  contents: read

jobs:
  run-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Create reports directory
        run: |
          mkdir -p ${{ github.workspace }}/reports
          chmod 777 ${{ github.workspace }}/reports

      - name: Run ReadyAPI tests and generate PDF report
        run: |
          echo "SLM_LICENSE_SERVER=${{ secrets.SLM_LICENSE_SERVER }}" > .env
          echo "API_KEY=${{ secrets.SLM_API_KEY }}" >> .env
          echo "COMMAND_LINE=-Esandbox -sTestSuite -RPDF -FPDF -f/project/reports /project/DemoAppProject.xml" >> .env

          docker pull smartbear/ready-api-soapui-testrunner
          docker run --env-file .env -v "${{ github.workspace }}:/project" smartbear/ready-api-soapui-testrunner

      - name: List PDF reports
        run: ls -lh reports/*.pdf

      - name: Install PDF parser dependencies
        run: pip install pymupdf

      - name: Parse PDF Report and Display Summary
        run: |
          python3 - <<EOF
          import fitz  # PyMuPDF
          import re
          import os

          pdf_path = "reports/DemoAppProject Test Results 1.pdf"
          doc = fitz.open(pdf_path)
          full_text = "".join([page.get_text() for page in doc])
          doc.close()

          test_cases = []
          current_case = {}
          lines = full_text.splitlines()

          for i, line in enumerate(lines):
              line = line.strip()
              if line.endswith("Summary"):
                  if current_case:
                      test_cases.append(current_case)
                      current_case = {}
                  current_case["Test Case"] = line.replace(" Summary", "").strip()
                  if i + 1 < len(lines):
                      next_line = lines[i + 1].strip()
                      match = re.match(r"(PASS|FAIL)\\s+\\d{2}:\\d{2}:\\d{2}\\s+(\\d+\\s*ms)", next_line)
                      if match:
                          current_case["Status"] = match.group(1)
                          current_case["Duration"] = match.group(2)
              else:
                  match = re.match(r"Step\\s+\\d+\\s+\\[(.*?)\\]\\s+(\\w+):\\s+took\\s+([\\d.]+)\\s+ms", line)
                  if match:
                      step_name, step_status, step_time = match.groups()
                      step_info = f"{step_name} ({step_status}, {step_time} ms)"
                      current_case.setdefault("Steps", []).append(step_info)

          if current_case:
              test_cases.append(current_case)

          summary_lines = []
          summary_lines.append("## ðŸ§ª ReadyAPI PDF Test Summary\\n")
          summary_lines.append("| Test Case | Status | Duration | Steps |")
          summary_lines.append("|-----------|--------|----------|-------|")

          for case in test_cases:
              steps = "; ".join(case.get("Steps", []))
              summary_lines.append(f"| {case.get('Test Case', '')} | {case.get('Status', '')} | {case.get('Duration', '')} | {steps} |")

          summary = "\\n".join(summary_lines)
          print(summary)

          if "GITHUB_STEP_SUMMARY" in os.environ:
              with open(os.environ["GITHUB_STEP_SUMMARY"], "w") as f:
                  f.write(summary)
          EOF

      - name: Upload PDF Report Artifact
        uses: actions/upload-artifact@v4
        with:
          name: readyapi-pdf-report
          path: reports/*.pdf
