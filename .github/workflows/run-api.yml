name: Run ReadyAPI Tests

on:
  workflow_dispatch:

permissions:
  checks: write
  contents: read

jobs:
  run-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Create reports directory
        run: |
          mkdir -p ${{ github.workspace }}/reports
          chmod 777 ${{ github.workspace }}/reports

      - name: Run ReadyAPI tests and generate PDF report
        run: |
          echo "SLM_LICENSE_SERVER=${{ secrets.SLM_LICENSE_SERVER }}" > .env
          echo "API_KEY=${{ secrets.SLM_API_KEY }}" >> .env
          echo "COMMAND_LINE=-Esandbox -sTestSuite -R'TestCase Report' -F'PDF' -f/project/reports /project/DemoAppProject.xml" >> .env

          docker pull smartbear/ready-api-soapui-testrunner
          docker run --env-file .env -v "${{ github.workspace }}:/project" smartbear/ready-api-soapui-testrunner
          
      - name: List contents of reports directory
        run: ls -la reports

      - name: Install PyMuPDF
        run: pip install pymupdf

      - name: Parse PDF Report and Generate Summary
        run: |
          python3 - <<EOF
          import os
          import fitz

          reports_dir = "reports"
          pdf_filename = None

          for file in os.listdir(reports_dir):
              if file.lower().endswith(".pdf"):
                  pdf_filename = os.path.join(reports_dir, file)
                  break

          if not pdf_filename:
              raise FileNotFoundError("No PDF report found in the 'reports' directory.")

          doc = fitz.open(pdf_filename)
          full_text = "".join([page.get_text() for page in doc])
          lines = full_text.splitlines()
          test_lines = [line.strip() for line in lines if line.strip().startswith("Scenario:")]

          summary_lines = []
          summary_lines.append("## ðŸ§ª ReadyAPI Test Summary (from PDF Report)\\n")
          summary_lines.append("| Scenario | Step | Status |")
          summary_lines.append("|----------|------|--------|")

          for line in test_lines:
              parts = line.split("|")
              if len(parts) == 2:
                  scenario = parts[0].replace("Scenario:", "").strip()
                  step = parts[1].strip()
                  status = "PASSED"
              elif len(parts) == 3:
                  scenario = parts[0].replace("Scenario:", "").strip()
                  step = parts[1].strip()
                  status = parts[2].strip().upper()
              else:
                  continue
              summary_lines.append(f"| {scenario} | {step} | {status} |")

          with open(os.environ['GITHUB_STEP_SUMMARY'], "w") as f:
              f.write("\\n".join(summary_lines))
          EOF

      - name: Upload PDF Report Artifact
        uses: actions/upload-artifact@v4
        with:
          name: readyapi-pdf-report
          path: reports/*.pdf
