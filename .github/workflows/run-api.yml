name: Run ReadyAPI Tests

on:
  workflow_dispatch:

permissions:
  checks: write
  contents: read

jobs:
  run-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Create reports directory
        run: |
          mkdir -p ${{ github.workspace }}/reports
          chmod 777 ${{ github.workspace }}/reports

      - name: Run ReadyAPI tests and generate JUnit report
        run: |
          echo "SLM_LICENSE_SERVER=${{ secrets.SLM_LICENSE_SERVER }}" > .env
          echo "API_KEY=${{ secrets.SLM_API_KEY }}" >> .env
          echo "COMMAND_LINE=-Esandbox -sTestSuite -RJUnit -j -f/project/reports /project/DemoAppProject.xml" >> .env

          docker pull smartbear/ready-api-soapui-testrunner
          docker run --env-file .env -v "${{ github.workspace }}:/project" smartbear/ready-api-soapui-testrunner

      - name: Convert JUnit XML to HTML
        run: |
          pip install junit2html
          junit2html reports/*.xml reports/report.html

      - name: Parse HTML Report and Display Summary
        run: |
          pip install beautifulsoup4
          python3 - <<EOF
          import os
          from bs4 import BeautifulSoup

          html_file = "reports/report.html"
          if not os.path.exists(html_file):
              raise FileNotFoundError("HTML report not found.")

          with open(html_file, "r", encoding="utf-8") as f:
              soup = BeautifulSoup(f, "html.parser")

          summary_lines = []
          summary_lines.append("## ðŸ§ª ReadyAPI Test Summary (from JUnit HTML Report)\n")
          summary_lines.append("| Test Case | Status | Duration |")
          summary_lines.append("|-----------|--------|----------|")

          for row in soup.find_all("tr"):
              cols = row.find_all("td")
              if len(cols) >= 3:
                  test_case = cols[0].get_text(strip=True)
                  status = cols[1].get_text(strip=True)
                  duration = cols[2].get_text(strip=True)
                  summary_lines.append(f"| {test_case} | {status} | {duration} |")

          summary = "\n".join(summary_lines)

          # Print to CLI
          print(summary)

          # Write to GitHub Actions summary
          with open(os.environ['GITHUB_STEP_SUMMARY'], "w") as f:
              f.write(summary)
          EOF

      - name: Upload HTML Report Artifact
        uses: actions/upload-artifact@v4
        with:
          name: readyapi-html-report
          path: reports/report.html
